buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id "idea"
    id "io.freefair.lombok" version "5.0.0"
//    id "org.openbakery.xcode-plugin" version "0.19.1"
}

group = 'org.example'
version = '1.0-SNAPSHOT'
sourceCompatibility = 8
targetCompatibility = 8

ext {
    appiumPort = 4723
}

repositories.addAll(buildscript.repositories)

defaultTasks 'clean', 'build'

gradle.startParameter.continueOnFailure = true

def isAppiumRunning() {
    logger.lifecycle("Checking is appium running.......")
    def request = ["curl", "http://127.0.0.1:$appiumPort/wd/hub/status"].execute()
    request.waitFor()
    if(request.exitValue() != 0) {
        logger.lifecycle("Failed to run test, Appium is not running.....")
        System.exit(1)
    }
}

def startSeleniumGridAndAppium() {
    logger.lifecycle("Checking is SeleniumGrid running.......")
    def request = ["curl", "http://localhost:4444/wd/hub/status"].execute()
    request.waitFor()
    if(request.exitValue() != 0) {
        logger.lifecycle("Starting selenium grid.....")
        exec {
            commandLine 'sh','./src/main/resources/scripts/launch_grid.sh'
        }
//    wait for nodes been registered
        sleep 10000
    }
}

def stopAppiumNodes() {
    logger.lifecycle("Stopping Appium nodes....")
    exec {
        commandLine 'bash', '-c', 'killall -9 node'
    }
}

def stopSeleniumGrid() {
    logger.lifecycle("Stopping Selenium Grid....")
    exec {
        commandLine 'curl', 'http://localhost:4444/lifecycle-manager?action=shutdown'
    }
}

test {
    testLogging {
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    ignoreFailures = true

    doFirst {
        systemProperties System.getProperties()
        startSeleniumGridAndAppium()
    }
//    maxParallelForks = 2
//    forkEvery = 1
    useJUnitPlatform()
    testLogging.showStandardStreams = false

    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycleEnabled
            logger.lifecycle "\nTest result: ${result.resultType}"
            logger.lifecycle "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
    doLast {
        stopAppiumNodes()
        stopSeleniumGrid()
    }
}

dependencies {
    implementation 'io.appium:java-client:7.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0-M1'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
}



